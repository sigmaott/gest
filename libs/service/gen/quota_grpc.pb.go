// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: quota.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QuotaService_GetQuotas_FullMethodName               = "/sigma.gviet.srv.quota.QuotaService/GetQuotas"
	QuotaService_GetQuotaByAppId_FullMethodName         = "/sigma.gviet.srv.quota.QuotaService/GetQuotaByAppId"
	QuotaService_GetQuotaResourceByAppId_FullMethodName = "/sigma.gviet.srv.quota.QuotaService/GetQuotaResourceByAppId"
	QuotaService_UpsertQuotaByAppId_FullMethodName      = "/sigma.gviet.srv.quota.QuotaService/UpsertQuotaByAppId"
)

// QuotaServiceClient is the client API for QuotaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuotaServiceClient interface {
	GetQuotas(ctx context.Context, in *GetQuotasRequest, opts ...grpc.CallOption) (*GetQuotasResponse, error)
	GetQuotaByAppId(ctx context.Context, in *GetQuotaByAppIdRequest, opts ...grpc.CallOption) (*GetQuotaByAppIdResponse, error)
	GetQuotaResourceByAppId(ctx context.Context, in *GetQuotaResourceByAppIdRequest, opts ...grpc.CallOption) (*GetQuotaResourceByAppIdResponse, error)
	UpsertQuotaByAppId(ctx context.Context, in *UpsertQuotaByAppIdRequest, opts ...grpc.CallOption) (*UpsertQuotaByAppIdResponse, error)
}

type quotaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuotaServiceClient(cc grpc.ClientConnInterface) QuotaServiceClient {
	return &quotaServiceClient{cc}
}

func (c *quotaServiceClient) GetQuotas(ctx context.Context, in *GetQuotasRequest, opts ...grpc.CallOption) (*GetQuotasResponse, error) {
	out := new(GetQuotasResponse)
	err := c.cc.Invoke(ctx, QuotaService_GetQuotas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaServiceClient) GetQuotaByAppId(ctx context.Context, in *GetQuotaByAppIdRequest, opts ...grpc.CallOption) (*GetQuotaByAppIdResponse, error) {
	out := new(GetQuotaByAppIdResponse)
	err := c.cc.Invoke(ctx, QuotaService_GetQuotaByAppId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaServiceClient) GetQuotaResourceByAppId(ctx context.Context, in *GetQuotaResourceByAppIdRequest, opts ...grpc.CallOption) (*GetQuotaResourceByAppIdResponse, error) {
	out := new(GetQuotaResourceByAppIdResponse)
	err := c.cc.Invoke(ctx, QuotaService_GetQuotaResourceByAppId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaServiceClient) UpsertQuotaByAppId(ctx context.Context, in *UpsertQuotaByAppIdRequest, opts ...grpc.CallOption) (*UpsertQuotaByAppIdResponse, error) {
	out := new(UpsertQuotaByAppIdResponse)
	err := c.cc.Invoke(ctx, QuotaService_UpsertQuotaByAppId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuotaServiceServer is the server API for QuotaService service.
// All implementations should embed UnimplementedQuotaServiceServer
// for forward compatibility
type QuotaServiceServer interface {
	GetQuotas(context.Context, *GetQuotasRequest) (*GetQuotasResponse, error)
	GetQuotaByAppId(context.Context, *GetQuotaByAppIdRequest) (*GetQuotaByAppIdResponse, error)
	GetQuotaResourceByAppId(context.Context, *GetQuotaResourceByAppIdRequest) (*GetQuotaResourceByAppIdResponse, error)
	UpsertQuotaByAppId(context.Context, *UpsertQuotaByAppIdRequest) (*UpsertQuotaByAppIdResponse, error)
}

// UnimplementedQuotaServiceServer should be embedded to have forward compatible implementations.
type UnimplementedQuotaServiceServer struct {
}

func (UnimplementedQuotaServiceServer) GetQuotas(context.Context, *GetQuotasRequest) (*GetQuotasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuotas not implemented")
}
func (UnimplementedQuotaServiceServer) GetQuotaByAppId(context.Context, *GetQuotaByAppIdRequest) (*GetQuotaByAppIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuotaByAppId not implemented")
}
func (UnimplementedQuotaServiceServer) GetQuotaResourceByAppId(context.Context, *GetQuotaResourceByAppIdRequest) (*GetQuotaResourceByAppIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuotaResourceByAppId not implemented")
}
func (UnimplementedQuotaServiceServer) UpsertQuotaByAppId(context.Context, *UpsertQuotaByAppIdRequest) (*UpsertQuotaByAppIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertQuotaByAppId not implemented")
}

// UnsafeQuotaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuotaServiceServer will
// result in compilation errors.
type UnsafeQuotaServiceServer interface {
	mustEmbedUnimplementedQuotaServiceServer()
}

func RegisterQuotaServiceServer(s grpc.ServiceRegistrar, srv QuotaServiceServer) {
	s.RegisterService(&QuotaService_ServiceDesc, srv)
}

func _QuotaService_GetQuotas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuotasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaServiceServer).GetQuotas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaService_GetQuotas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaServiceServer).GetQuotas(ctx, req.(*GetQuotasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaService_GetQuotaByAppId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuotaByAppIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaServiceServer).GetQuotaByAppId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaService_GetQuotaByAppId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaServiceServer).GetQuotaByAppId(ctx, req.(*GetQuotaByAppIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaService_GetQuotaResourceByAppId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuotaResourceByAppIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaServiceServer).GetQuotaResourceByAppId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaService_GetQuotaResourceByAppId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaServiceServer).GetQuotaResourceByAppId(ctx, req.(*GetQuotaResourceByAppIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaService_UpsertQuotaByAppId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertQuotaByAppIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaServiceServer).UpsertQuotaByAppId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaService_UpsertQuotaByAppId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaServiceServer).UpsertQuotaByAppId(ctx, req.(*UpsertQuotaByAppIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuotaService_ServiceDesc is the grpc.ServiceDesc for QuotaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuotaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sigma.gviet.srv.quota.QuotaService",
	HandlerType: (*QuotaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQuotas",
			Handler:    _QuotaService_GetQuotas_Handler,
		},
		{
			MethodName: "GetQuotaByAppId",
			Handler:    _QuotaService_GetQuotaByAppId_Handler,
		},
		{
			MethodName: "GetQuotaResourceByAppId",
			Handler:    _QuotaService_GetQuotaResourceByAppId_Handler,
		},
		{
			MethodName: "UpsertQuotaByAppId",
			Handler:    _QuotaService_UpsertQuotaByAppId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quota.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: ssai_usage_monitor.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SSAIUsageMonitorService_CheckQuota_FullMethodName = "/sigma.gviet.srv.quota.SSAIUsageMonitorService/CheckQuota"
)

// SSAIUsageMonitorServiceClient is the client API for SSAIUsageMonitorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SSAIUsageMonitorServiceClient interface {
	CheckQuota(ctx context.Context, in *CheckQuotaRequest, opts ...grpc.CallOption) (*CheckQuotaResponse, error)
}

type sSAIUsageMonitorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSSAIUsageMonitorServiceClient(cc grpc.ClientConnInterface) SSAIUsageMonitorServiceClient {
	return &sSAIUsageMonitorServiceClient{cc}
}

func (c *sSAIUsageMonitorServiceClient) CheckQuota(ctx context.Context, in *CheckQuotaRequest, opts ...grpc.CallOption) (*CheckQuotaResponse, error) {
	out := new(CheckQuotaResponse)
	err := c.cc.Invoke(ctx, SSAIUsageMonitorService_CheckQuota_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SSAIUsageMonitorServiceServer is the server API for SSAIUsageMonitorService service.
// All implementations should embed UnimplementedSSAIUsageMonitorServiceServer
// for forward compatibility
type SSAIUsageMonitorServiceServer interface {
	CheckQuota(context.Context, *CheckQuotaRequest) (*CheckQuotaResponse, error)
}

// UnimplementedSSAIUsageMonitorServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSSAIUsageMonitorServiceServer struct {
}

func (UnimplementedSSAIUsageMonitorServiceServer) CheckQuota(context.Context, *CheckQuotaRequest) (*CheckQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckQuota not implemented")
}

// UnsafeSSAIUsageMonitorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SSAIUsageMonitorServiceServer will
// result in compilation errors.
type UnsafeSSAIUsageMonitorServiceServer interface {
	mustEmbedUnimplementedSSAIUsageMonitorServiceServer()
}

func RegisterSSAIUsageMonitorServiceServer(s grpc.ServiceRegistrar, srv SSAIUsageMonitorServiceServer) {
	s.RegisterService(&SSAIUsageMonitorService_ServiceDesc, srv)
}

func _SSAIUsageMonitorService_CheckQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSAIUsageMonitorServiceServer).CheckQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSAIUsageMonitorService_CheckQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSAIUsageMonitorServiceServer).CheckQuota(ctx, req.(*CheckQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SSAIUsageMonitorService_ServiceDesc is the grpc.ServiceDesc for SSAIUsageMonitorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SSAIUsageMonitorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sigma.gviet.srv.quota.SSAIUsageMonitorService",
	HandlerType: (*SSAIUsageMonitorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckQuota",
			Handler:    _SSAIUsageMonitorService_CheckQuota_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ssai_usage_monitor.proto",
}
